services:
  order-app:
    build: .
    ports:
      - "8084:8084"
    depends_on:
      order-db:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_FLYWAY_ENABLED=${SPRING_FLYWAY_ENABLED}
      - SERVER_PORT=8084
    networks:
      - microservices_network

  order-db:
    image: postgres:14-alpine
    ports:
      - "5438:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - microservices_network

networks:
  microservices_network:
    external: true

volumes:
  order_postgres_data: